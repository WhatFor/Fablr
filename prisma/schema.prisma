generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Game {
  id          String @id @default(cuid())
  authorId    String
  name        String
  description String
  isPublic    Boolean @default(false)

  dateCreated DateTime @default(now())
  dateDeleted DateTime?

  author      User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  nodes       Node[]
  ratings     GameRating[]
  records     GameRecord[]
}

model GameRating {
  id          String @id @default(cuid())
  gameId      String
  playerId    String
  rating      Int @db.UnsignedTinyInt

  dateCreated DateTime @default(now())
  dateDeleted DateTime?

  game        Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player      User @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

model GameRecord {
  id          String @id @default(cuid())
  gameId      String
  playerId    String
  result      GameRecordResult
  
  dateCreated DateTime @default(now())
  dateDeleted DateTime?

  game        Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player      User @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

enum GameRecordResult {
  Win
  Lose
}

model Node {
  id                  String @id @default(cuid())
  parentNodeId        String?
  gameId              String
  type                NodeType
  parentNodeLinkText  String
  titleText           String
  bodyText            String
  editorPositionX     Int
  editorPositionY     Int

  dateCreated         DateTime @default(now())
  dateDeleted         DateTime?

  game                Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  parentNode          Node? @relation(fields: [parentNodeId], references: [id], onDelete: NoAction, onUpdate: NoAction, name: "parent-child-node")
  children            Node[] @relation(name: "parent-child-node")
}

enum NodeType {
  Start
  Standard
  Lose
  Win
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  games         Game[]
  ratings       GameRating[]
  records       GameRecord[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
